Cách triển khai container

Tại sao sử dụng Docker?

Cài đặt docker 
$vi install-docker.sh (tham khảo DevOpsSeEdu)

Search images docker
Keywork "ubuntu docker images"

Kiểm tra các phiên bản images docker
$docker image

Đặt tên cho docker cùng với phiên bản
$docker run --name ubuntu -it ubuntu:22.04

Xem lại trạng thái các container đang có trên server
$docker ps -a

Khởi động một container:
$docker start ubuntu : có thể là NAMES hoặc 3 ký tự đầu của ID CONTAINER

Vào container:
$docker exec -it ubuntu bash

$docker run --name nginx -p 9999:80 nginx
  -d : chạy dưới nền
  9999: port chạy trên server
  80: port chạy trong container

Dừng các docker container:
$docker stop ubuntu

Xóa docker container:
$docker rm ubuntu 
$docker -f ubuntu
  -f : buộc xóa khi docker đang run 

Xóa docker image:
$docker rmi name:tag (latest thì không cần tag)

-----Dockerfile-----
+ Đưa source code vào trong container 
+ Cài đặt công cụ để chạy dự án

Dockerfile commands
FROM : kéo image đã dựng trên server
WORKDIR : thư mục làm việc (mặc định WORKDIR/app)
COPY : copy source code vào trong container 
RUN : chạy các câu lệnh trên Linux
ENV : khai báo các biến
EXPOSE : định nghĩa ứng dụng container được chạy trong port nào
CMD : xác định lệnh và giá trị của lệnh
ENTRYPOINT : giữ nguyên giá trị lệnh mặc định 

-----Build dự án Backend-----
Lưu ý : Nếu nhận được error "org.hibernate.exception.JDBCConnectionException: Could not open connection"
nghĩa là dự án chưa tạo database

Keywork "maven docker image with java 8 alpine"
Keywork "java docker image version 8"

Tạo file Dockerfile
-----start script-----
## Build stage ##
FROM maven:3.5.3-jdk-8-alpine AS build

WORKDIR /app
COPY . .

RUN mvn install -DskipTests=true

## Run stage ##
FROM amazoncorretto:8u402-alpine-jre

WORKDIR /run
COPY --from=build /app/target/shoe-ShoppingCart-0.0.1-SNAPSHOT.jar /run/shoe-ShoppingCart-0.0.1-SNAPSHOT.jar

EXPOSE 8080

ENTRYPOINT ["java", "-jar", "/run/shoe-ShoppingCart-0.0.1-SNAPSHOT.jar"]
-----end script-----

Buld docker file
$ docker build -t shoeshop:v1 .

Chạy container:
$ docker run --name shoeshop -dp 8888:8080 shoeshop:v1

Tự viết scrip cài đặt công cụ nếu không tin tưởng source nào 
Search "Docker alpine image"
Search "How to install java 8 from alpine"
-----start script-----
## Build stage ##
FROM maven:3.5.3-jdk-8-alpine AS build

WORKDIR /app
COPY . .

RUN mvn install -DskipTests=true

## Run stage ##
FROM alpine:3.19

RUN apk add openjdk8

WORKDIR /run
COPY --from=build /app/target/shoe-ShoppingCart-0.0.1-SNAPSHOT.jar /run/shoe-ShoppingCart-0.0.1-SNAPSHOT.jar

EXPOSE 8080

ENTRYPOINT ["java", "-jar", "/run/shoe-ShoppingCart-0.0.1-SNAPSHOT.jar"]
-----end script-----

$docker build -t shoeshop:v2 -f Dockerfile-v2 .
$docker run --name shoeshop-v2 -dp 9999:8080 shoeshop:v2 -f
  -f : xem log real time

Chạy docker dưới dạng user
-----start script-----
## Build stage ##
FROM maven:3.5.3-jdk-8-alpine AS build

WORKDIR /app
COPY . .

RUN mvn install -DskipTests=true

## Run stage ##
FROM alpine:3.19

RUN adduser -D shoeshop

RUN apk add openjdk8

WORKDIR /run
COPY --from=build /app/target/shoe-ShoppingCart-0.0.1-SNAPSHOT.jar /run/shoe-ShoppingCart-0.0.1-SNAPSHOT.jar

RUN chown -R shoeshop:shoeshop /run

USER shoeshop

EXPOSE 8080

ENTRYPOINT ["java", "-jar", "/run/shoe-ShoppingCart-0.0.1-SNAPSHOT.jar"]
-----end script-----
